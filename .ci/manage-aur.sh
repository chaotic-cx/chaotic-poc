#!/usr/bin/env bash
set -euo pipefail

# No point in running this script if we don't have keys available
set +x
if [[ -z ${AUR_KEY+x} ]]; then
    echo "No AUR SSH key available, backing off!"
    exit 1
else
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    echo "$AUR_KEY" >/root/.ssh/id_rsa
    chmod 600 /root/.ssh/id_rsa
fi
set -x

declare -a PACKAGES
read -a PACKAGES <<<"$@" # fixme? mapfile -t / readarray -d both produced unusable results

# shellcheck source=/dev/null
source .ci/util.shlib
export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=accept-new"

[[ -v "TMPDIR" ]] || TMPDIR="/tmp"
mkdir -p "$TMPDIR/aur-push"

if [ -v "PACKAGES[0]" ] && [ "${PACKAGES[0]}" == "all" ]; then
    echo "AUR push of all managed packages requested."
    UTIL_GET_PACKAGES PACKAGES
fi

# Check if the array of packages is empty
if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "No packages to push."
    exit 0
fi

for package in "${PACKAGES[@]}"; do
    unset VARIABLES
    declare -A VARIABLES
    if UTIL_READ_MANAGED_PACAKGE "$package" VARIABLES; then
        if [[ -v CI_MANAGE_AUR ]] && [[ "$CI_MANAGE_AUR" != 1 ]]; then
            echo "Package $package is not managed by this CI pipeline!"
            continue
        else
            # Clone via SSH to allow pushing
            if ! test -d "$TMPDIR/aur-push/$package"; then
                git clone "ssh://aur@aur.archlinux.org/$package.git" "$TMPDIR/aur-push/$package"
            fi

            # We always run shfmt on the PKGBUILD. Two runs of shfmt on the same file should not change anything
            shfmt -w "$TMPDIR/aur-pulls/$package/PKGBUILD"

            # Rsync: delete files in the destination that are not in the source. Exclude deleting .CI, exclude copying .git
            # shellcheck disable=SC2046
            rsync -a --delete $(UTIL_GET_EXCLUDE_LIST "--exclude") "$package/" "$TMPDIR/aur-pulls/$package/"

            # Only push if there are changes
            if ! git diff --exit-code --quiet; then
                git add .
                git commit -m "chore: update $package" \
                    -m "This commit was automatically generated by Garuda Linux' CI pipeline." \
                    -m "The changelog can be found at https://gitlab.com/garuda-linux/pkgbuilds." \
                    -m "Logs of the corresponding pipeline run can be found here: $CI_PIPELINE_URL."
                git push
            else
                echo "No changes detected, skipping!"
                continue
            fi
        fi
    else
        continue
    fi
done
