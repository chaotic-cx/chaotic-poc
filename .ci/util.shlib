#!/usr/bin/env bash

KNOWN_VARIABLE_LIST=(CI_PKGBUILD_SOURCE CI_GIT_COMMIT CI_PKGBUILD_TIMESTAMP)

# Get a list of all the packages in the repo
function UTIL_GET_PACKAGES() {
    local -n nameref_array=${1:-PACKAGES}
    mapfile -t nameref_array < <(find . -mindepth 1 -type d -not -path '*/.*' -printf '%P\n')
}

function UTIL_PRUNE_UNKNOWN_VARIABLES() {
    local -n PRUNE_VARIABLES=${1:-VARIABLES}
    for key in "${!PRUNE_VARIABLES[@]}"; do
        if [[ ! " ${KNOWN_VARIABLE_LIST[*]} " == *" ${key} "* ]]; then
            unset PRUNE_VARIABLES["$key"]
        fi
    done
}

function UTIL_READ_VARIABLES_FROM_FILE() {
    local file=$1
    local -n READ_ASSOC_ARRAY=${2:-VARIABLES}
    while IFS= read -r line || [ -n "$line" ]; do
        if [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)[[:space:]]*=[[:space:]]*(.*)[[:space:]]*$ ]]; then
            READ_ASSOC_ARRAY["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
        fi
    done < "$file"
}

function UTIL_WRITE_VARIABLES_TO_FILE() {
    local file=$1
    local -n WRITE_ASSOC_ARRAY=${2:-VARIABLES}

    # Clear the file before writing variables
    > "$file"

    for key in "${!WRITE_ASSOC_ARRAY[@]}"; do
        echo "$key=${WRITE_ASSOC_ARRAY[$key]}" >> "$file"
    done
}

function UTIL_READ_MANAGED_PACAKGE() {
    local target_file="./${1}/.CI_CONFIG"
    if [ -f "$target_file" ]; then
        local -n READ_MANAGED_ASSOC_ARRAY=${2:-VARIABLES}
        UTIL_READ_VARIABLES_FROM_FILE "$target_file" READ_MANAGED_ASSOC_ARRAY

        # Check if any variable at all was read
        if [ ${#READ_MANAGED_ASSOC_ARRAY[@]} -ne 0 ]; then
            UTIL_PRUNE_UNKNOWN_VARIABLES READ_MANAGED_ASSOC_ARRAY
            READ_MANAGED_ASSOC_ARRAY[PKGBASE]="$1"
            return 0
        fi
    fi
    return 1
}